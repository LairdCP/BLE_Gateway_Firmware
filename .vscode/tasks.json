{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  "version": "2.0.0",
  "windows": {
    "options": {
      "shell": {
        "executable": "cmd.exe",
        "args": ["/d", "/c"]
      }
    }
  },
  "tasks": [
    {
      "label": "build aws",
      "type": "shell",
      "dependsOn": ["increment build version"],
      "command": "west build -b ${input:board} -d ${workspaceRoot}/build/${input:board}/aws ${workspaceRoot}/app -- '-DCONFIG_MCUBOOT_IMAGE_VERSION=\"${input:get_fw_ver}\"' '-DCONFIG_MEMFAULT_NCS_PROJECT_KEY=\"${config:laird_memfault_key}\"' '-DCONFIG_MEMFAULT_NCS_FW_VERSION=\"${input:get_fw_ver}\"' '-DCONFIG_MEMFAULT_NCS_FW_TYPE=\"OOB_demo_AWS\"'",
      "windows": {
        "command": "west build -b ${input:board} -d ${workspaceRoot}\\build\\${input:board}\\aws ${workspaceRoot}\\app -- -DCONFIG_MCUBOOT_IMAGE_VERSION=\\\"${input:get_fw_ver}\\\" -DCONFIG_MEMFAULT_NCS_PROJECT_KEY=\\\"${config:laird_memfault_key}\\\" -DCONFIG_MEMFAULT_NCS_FW_VERSION=\\\"${input:get_fw_ver}\\\" -DCONFIG_MEMFAULT_NCS_FW_TYPE=\\\"OOB_demo_AWS\\\""
      },
      "problemMatcher": {
        "base": "$gcc",
        "fileLocation": "absolute"
      }
    },
    {
      "label": "build lwm2m",
      "type": "shell",
      "dependsOn": ["increment build version"],
      "command": "west build -b ${input:board} -d ${workspaceRoot}/build/${input:board}/lwm2m ${workspaceRoot}/app -- -DOVERLAY_CONFIG=\"${config:app_lwm2m_config_unix}\"  '-DCONFIG_MCUBOOT_IMAGE_VERSION=\"${input:get_fw_ver}\"' '-DCONFIG_MEMFAULT_NCS_PROJECT_KEY=\"${config:laird_memfault_key}\"' '-DCONFIG_MEMFAULT_NCS_FW_VERSION=\"${input:get_fw_ver}\"' '-DCONFIG_MEMFAULT_NCS_FW_TYPE=\"LwM2M\"'",
      "windows": {
        "command": "west build -b ${input:board} -d ${workspaceRoot}\\build\\${input:board}\\lwm2m ${workspaceRoot}\\app -- -DOVERLAY_CONFIG=\"${config:app_lwm2m_config_windows}\" -DCONFIG_MCUBOOT_IMAGE_VERSION=\\\"${input:get_fw_ver}\\\" -DCONFIG_MEMFAULT_NCS_PROJECT_KEY=\\\"${config:laird_memfault_key}\\\" -DCONFIG_MEMFAULT_NCS_FW_VERSION=\\\"${input:get_fw_ver}\\\" -DCONFIG_MEMFAULT_NCS_FW_TYPE=\\\"LwM2M\\\""
      },
      "problemMatcher": {
        "base": "$gcc",
        "fileLocation": "absolute"
      }
    },
    {
      "label": "build contact tracing",
      "type": "shell",
      "dependsOn": ["increment build version"],
      "command": "west build -b ${input:board} -d ${workspaceRoot}/build/${input:board}/ct ${workspaceRoot}/app -- -DOVERLAY_CONFIG=\"${config:app_ct_config_unix}\" '-DCONFIG_MCUBOOT_IMAGE_VERSION=\"${input:get_fw_ver}\"' '-DCONFIG_MEMFAULT_NCS_PROJECT_KEY=\"${config:laird_memfault_key}\"' '-DCONFIG_MEMFAULT_NCS_FW_VERSION=\"${input:get_fw_ver}\"' '-DCONFIG_MEMFAULT_NCS_FW_TYPE=\"Contact_Tracing\"'",
      "windows": {
        "command": "west build -b ${input:board} -d ${workspaceRoot}\\build\\${input:board}\\ct ${workspaceRoot}\\app -- -DOVERLAY_CONFIG=\"${config:app_ct_config_windows}\" -DCONFIG_MCUBOOT_IMAGE_VERSION=\\\"${input:get_fw_ver}\\\" -DCONFIG_MEMFAULT_NCS_PROJECT_KEY=\\\"${config:laird_memfault_key}\\\" -DCONFIG_MEMFAULT_NCS_FW_VERSION=\\\"${input:get_fw_ver}\\\" -DCONFIG_MEMFAULT_NCS_FW_TYPE=\\\"Contact_Tracing\\\""
      },
      "problemMatcher": {
        "base": "$gcc",
        "fileLocation": "absolute"
      }
    },
    {
      // This command requires that the project was already built.
      // It will re-compile changes, but won't work if there are CMake or Kconfig changes.
      "label": "build",
      "type": "shell",
      "dependsOn": ["increment build version"],
      "command": "west build -d ${workspaceRoot}/build/${input:board}/${input:app}",
      "windows": {
        "command": "west build -d ${workspaceRoot}\\build\\${input:board}\\${input:app}"
      },
      "problemMatcher": {
        "base": "$gcc",
        "fileLocation": "absolute"
      }
    },
    {
      "label": "re-build",
      "type": "shell",
      "dependsOn": ["increment build version"],
      "command": "west build -p -b ${input:board} -d ${workspaceRoot}/build/${input:board}/aws ${workspaceRoot}/app -- '-DCONFIG_MEMFAULT_NCS_PROJECT_KEY=\"${config:laird_memfault_key}\"' '-DCONFIG_MEMFAULT_NCS_FW_VERSION=\"${input:get_fw_ver}\"' '-DCONFIG_MEMFAULT_NCS_FW_TYPE=\"OOB_demo_AWS\"'",
      "windows": {
        "command": "west build -p -b ${input:board} -d ${workspaceRoot}\\build\\${input:board}\\aws ${workspaceRoot}\\app -- -DCONFIG_MEMFAULT_NCS_PROJECT_KEY=\\\"${config:laird_memfault_key}\\\" -DCONFIG_MEMFAULT_NCS_FW_VERSION=\\\"${input:get_fw_ver}\\\" -DCONFIG_MEMFAULT_NCS_FW_TYPE=\\\"OOB_demo_AWS\\\""
      },
      "problemMatcher": {
        "base": "$gcc",
        "fileLocation": "absolute"
      }
    },
    {
      "label": "flash app",
      "type": "shell",
      "command": "west flash -d ${workspaceRoot}/build/${input:board}/${input:app}",
      "windows": {
        "command": "west flash -d ${workspaceRoot}\\build\\${input:board}\\${input:app}"
      },
      "problemMatcher": []
    },
    {
      "label": "clean app",
      "type": "shell",
      "command": "west build -t clean -d ${workspaceRoot}/build/${input:board}/${input:app}",
      "windows": {
        "command": "west build -t clean -d ${workspaceRoot}\\build\\${input:board}\\${input:app}"
      },
      "problemMatcher": []
    },
    {
      "label": "pristine app",
      "type": "shell",
      "command": "west build -t pristine -d ${workspaceRoot}/build/${input:board}/${input:app}",
      "windows": {
        "command": "west build -t pristine -d ${workspaceRoot}\\build\\${input:board}\\${input:app}"
      },
      "problemMatcher": []
    },
    {
      "label": "menuconfig",
      "type": "shell",
      "command": "west build -t menuconfig -d ${workspaceRoot}/build/${input:board}/${input:app} ${workspaceRoot}/app",
      "windows": {
        "command": "west build -t menuconfig -d ${workspaceRoot}\\build\\${input:board}\\${input:app} ${workspaceRoot}\\app"
      },
      "problemMatcher": []
    },
    {
      "label": "app ram_report",
      "type": "shell",
      "command": "west build -d ${workspaceRoot}/build/${input:board}/${input:app} ${workspaceRoot}/app --target ram_report > ${workspaceRoot}/build/${input:board}/${input:app}/ram_report",
      "windows": {
        "command": "west build -d ${workspaceRoot}\\build\\${input:board}\\${input:app} ${workspaceRoot}\\app --target ram_report > ${workspaceRoot}\\build\\${input:board}\\${input:app}\\ram_report"
      },
      "problemMatcher": []
    },
    {
      "label": "app rom_report",
      "type": "shell",
      "command": "west build -d ${workspaceRoot}/build/${input:board}/${input:app} ${workspaceRoot}/app --target rom_report > ${workspaceRoot}/build/${input:board}/${input:app}/rom_report",
      "windows": {
        "command": "west build -d ${workspaceRoot}\\build\\${input:board}\\${input:app} ${workspaceRoot}\\app --target rom_report > ${workspaceRoot}\\build\\${input:board}\\${input:app}\\rom_report"
      },
      "problemMatcher": []
    },
    {
      "label": "aws - build flash",
      "type": "shell",
      "dependsOrder": "sequence",
      "dependsOn": ["build aws", "flash app"],
      "problemMatcher": []
    },
    {
      "label": "lwm2m - build flash",
      "type": "shell",
      "dependsOrder": "sequence",
      "dependsOn": ["build lwm2m", "flash app"],
      "problemMatcher": []
    },
    {
      "label": "mcumgr upload signed app",
      "type": "shell",
      "command": "sudo mcumgr -t 20 -r 2 ${input:mcumgr_cnx} image upload ${workspaceRoot}/build/${input:board}/${input:app}/zephyr/zephyr.signed.bin",
      "problemMatcher": []
    },
    {
      "label": "mcumgr list images",
      "type": "shell",
      "command": "sudo mcumgr ${input:mcumgr_cnx} image list",
      "problemMatcher": []
    },
    {
      "label": "mcumgr test image",
      "type": "shell",
      "command": "sudo mcumgr ${input:mcumgr_cnx} image test ${input:image-hash}",
      "problemMatcher": []
    },
    {
      "label": "mcumgr reset",
      "type": "shell",
      "command": "sudo mcumgr ${input:mcumgr_cnx} reset",
      "problemMatcher": []
    },
    {
      "label": "mcumgr confirm",
      "type": "shell",
      "command": "sudo mcumgr ${input:mcumgr_cnx} image confirm",
      "problemMatcher": []
    },
    {
      "label": "mcumgr echo",
      "type": "shell",
      "command": "sudo mcumgr ${input:mcumgr_cnx} echo 'hello'",
      "problemMatcher": []
    },
    {
      "label": "mcumgr upload file",
      "type": "shell",
      "command": "sudo mcumgr -t 5 -r 2 ${input:mcumgr_cnx} fs upload ${input:src_file_path} /lfs/${input:dst_file_name}",
      "problemMatcher": []
    },
    {
      "label": "get build id (memfault)",
      "type": "shell",
      "command": "arm-none-eabi-readelf -n ${workspaceRoot}/build/${input:board}/${input:app}/zephyr/zephyr.elf",
      "windows": {
        "command": "arm-none-eabi-readelf -n ${workspaceRoot}\\build\\${input:board}\\${input:app}\\zephyr\\zephyr.elf"
      },
      "problemMatcher": []
    },
    {
      "label": "increment build version",
      "type": "shell",
      "command": "python3 ${workspaceRoot}/scripts/increment_build_version.py ${workspaceRoot}/app/common/include/app_version.h",
      "windows": {
        "command": "py ${workspaceRoot}\\scripts\\increment_build_version.py ${workspaceRoot}\\app\\common\\include\\app_version.h"
      },
      "problemMatcher": []
    }
  ],
  "inputs": [
    {
      "id": "app",
      "description": "Select an app",
      "default": "aws",
      "type": "pickString",
      "options": ["aws", "lwm2m", "ct"]
    },
    {
      "id": "board",
      "description": "Select a board",
      "default": "pinnacle_100_dvk",
      "type": "pickString",
      "options": [
        "mg100",
        "pinnacle_100_dvk",
        "bl5340_dvk_cpuapp"
      ]
    },
    {
      "id": "mcumgr_cnx",
      "description": "mcumgr connection params",
      "type": "pickString",
      "options": [
        // Change 'peer_name=' to match your device name
        "--conntype ble --connstring ctlr_name=hci0,peer_name='MG100-0303848'",
        // Change 'dev=' to match your serial device
        "--conntype serial --connstring dev=/dev/tty.usbserial-FT4G5B9B,mtu=2048"
      ]
    },
    {
      "id": "image-hash",
      "description": "hash of firmware image",
      "type": "promptString",
      "default": "enter hash here"
    },
    {
      "id": "src_file_path",
      "description": "full path of file to upload",
      "type": "promptString",
      "default": "enter file path"
    },
    {
      "id": "dst_file_name",
      "description": "name of the destination file",
      "type": "promptString",
      "default": "enter file name"
    },
    {
      "id": "get_fw_ver",
      // read key-value pair in file created by increment_build_version python script
      "type": "command",
      "command": "extension.commandvariable.file.content",
      "args": {
        // Doesn't work with workspaceRoot
        "fileName": "${workspaceFolder}/version.txt",
        "key": "version"
      }
    }
  ]
}
